package bileschi.audiovision;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioTrack;

//TODO(mlbileschi): allow for amount of squareness/sineness

public class SoundFactory {

  public static final double BASE_FREQUENCY = 65;
  public static final double MAX_FREQUENCY = 880;
  private static final int SAMPLE_RATE = 8000;

  public static void playSound(byte[] soundToPlay) {
    final AudioTrack audioTrack = new AudioTrack(AudioManager.STREAM_MUSIC,
        SAMPLE_RATE, AudioFormat.CHANNEL_OUT_STEREO,
        AudioFormat.ENCODING_PCM_16BIT, soundToPlay.length,
        AudioTrack.MODE_STATIC);
    audioTrack.setStereoVolume(1.0f, 1.0f);
    audioTrack.write(soundToPlay, 0, soundToPlay.length);
    audioTrack.play();
  }

  public static List<Double> makeWave(WaveType waveType, int duration,
      double frequency, double leftPercentVolume) {
    return toWeightedStereo(
        waveType.makeWave(SAMPLE_RATE, duration, frequency), leftPercentVolume);
  }

  public static List<Double> addLists(List<Double>... listsToAdd) {
    if (listsToAdd.length == 0) {
      return new ArrayList<Double>();
    }
    int lengthOfAllLists = listsToAdd[0].size();
    for (List<? extends Double> innerList : listsToAdd) {
      // Check that the lengths are all the same.
      if (innerList.size() != lengthOfAllLists) {
        throw new UnsupportedOperationException(
            "Can't add element-wise lists that are not the same size");
      }
    }
    List<Double> toReturn = new ArrayList<Double>();
    for (int i = 0; i < lengthOfAllLists; i++) {
      Double toPush = 0.0;
      for (int j = 0; j < listsToAdd.length; j++) {
        toPush = toPush.doubleValue() + listsToAdd[j].get(i).doubleValue();
      }
      toReturn.add(toPush);
    }
    return toReturn;
  }

  private static List<Short> scaleToListOfShort(List<Double> toScale) {
    double maxVal = Collections.max(toScale);
    double scaleFactor = Short.MAX_VALUE / maxVal;
    List<Short> toReturn = new ArrayList<Short>(toScale.size());
    for (Double d : toScale) {
      toReturn.add((short) (d * scaleFactor));
    }
    return toReturn;
  }

  /*
   * public static List<Double> interpolateLeftRight(List<Double> left,
   * List<Double> right) { List<Double> toReturn = new ArrayList<Double>(); if
   * (left.size() != right.size()) { throw new UnsupportedOperationException(
   * "Cannot interpolate two lists of different length"); } for (int i = 0; i <
   * left.size(); i++) { toReturn.add(left.get(i)); toReturn.add(right.get(i));
   * } return toReturn; }
   */

  /**
   * Right weight is 1-left weight.
   */
  public static List<Double> toWeightedStereo(List<Double> sample,
      double leftPercentVolume) {
    if (leftPercentVolume < 0 || leftPercentVolume > 1) {
      throw new UnsupportedOperationException(
          "Cannot weight a sample left-right with "
              + "that weight. Weights must be between 0 and 1, inclusive.");
    }
    List<Double> toReturn = new ArrayList<Double>(2 * sample.size());
    for (double d : sample) {
      toReturn.add(d * leftPercentVolume);
      toReturn.add(d * (1 - leftPercentVolume));
    }
    return toReturn;
  }

  public static byte[] listToByteArr(List<Double> sample) {
    List<Short> sampleShorts = scaleToListOfShort(sample);

    byte[] toReturn = new byte[sampleShorts.size() * 2];
    // convert to 16 bit pcm sound array
    // assumes the sample buffer is normalised.
    int idx = 0;
    for (final Short sVal : sampleShorts) {
      // in 16 bit wav PCM, first byte is the low order byte
      toReturn[idx++] = (byte) (sVal & 0x00ff);
      toReturn[idx++] = (byte) ((sVal & 0xff00) >>> 8);
    }
    return toReturn;
  }
}
