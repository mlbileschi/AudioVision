package bileschi.audiovision;

// originally from http://marblemice.blogspot.com/2010/04/generate-and-play-tone-in-android.html
// and modified by Steve Pomeroy <steve@staticfree.info> and mlbileschi@gmail.com

import java.util.ArrayList;
import java.util.List;

import android.app.Activity;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioTrack;
import android.os.Bundle;
import android.os.Handler;

public class MainActivity extends Activity {

  private enum WaveType {
    SQUARE {
      public List<Double> makeWave(int duration, double freqOfTone) {
        List<Double> sample = new ArrayList<Double>();
        int numSamples = duration * SAMPLE_RATE;
        // fill out the array
        for (int i = 0; i < numSamples; i++) {
          double toAdd;
          if (Math.sin(2 * Math.PI * i / (SAMPLE_RATE / freqOfTone)) > 0) {
            toAdd = 1.0;
          } else {
            toAdd = -1.0;
          }

          sample.add(toAdd);
        }
        return sample;
      }
    },

    SINE {
      public List<Double> makeWave(int duration, double freqOfTone) {
        List<Double> sample = new ArrayList<Double>();
        int numSamples = duration * SAMPLE_RATE;
        // fill out the array
        for (int i = 0; i < numSamples; i++) {
          sample.add(Math.sin(2 * Math.PI * i / (SAMPLE_RATE / freqOfTone)));
        }
        return sample;
      }
    };

    public abstract List<Double> makeWave(int duration, double freqOfTone);
  }

  private static final int SAMPLE_RATE = 8000;

  Handler handler = new Handler();

  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
  }

  @Override
  protected void onResume() {
    super.onResume();
    // Use a new tread as this can take a while
    final Thread thread = new Thread(new Runnable() {
      public void run() {
        final byte[] soundToPlay = SoundFactory.listToByteArr(SoundFactory.scaleToListOfShort(SoundFactory
            .addLists(SoundFactory.toWeightedStereo(
                WaveType.SINE.makeWave(3, 220), 1.0), SoundFactory
                .toWeightedStereo(WaveType.SQUARE.makeWave(3, 554.36), 0.5),
                SoundFactory.toWeightedStereo(
                    WaveType.SINE.makeWave(3, 659.26), 0.0))));
        handler.post(new Runnable() {
          public void run() {
            playSound(soundToPlay);
          }
        });
      }
    });
    thread.start();
  }

  void playSound(byte[] soundToPlay) {
    final AudioTrack audioTrack = new AudioTrack(AudioManager.STREAM_MUSIC,
        SAMPLE_RATE, AudioFormat.CHANNEL_OUT_STEREO,
        AudioFormat.ENCODING_PCM_16BIT, soundToPlay.length,
        AudioTrack.MODE_STATIC);
    audioTrack.setStereoVolume(1.0f, 1.0f);
    audioTrack.write(soundToPlay, 0, soundToPlay.length);
    audioTrack.play();
  }

}